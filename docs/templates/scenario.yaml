# scenario.yaml Template
# This is a comprehensive template for creating benchmark scenarios
# Copy this file and customize it for your specific benchmark

# =============================================================================
# BASIC INFORMATION (Required)
# =============================================================================

# Unique identifier for this scenario (required)
# Use kebab-case: "update-dependencies", "migrate-to-react-18"
id: my-scenario

# Parent suite name (required)
# Groups related scenarios together: "dependency-management", "code-migration"
suite: my-suite

# Human-readable title (optional but recommended)
title: "Update React Dependencies"

# Detailed description of what this scenario tests (optional)
description: |
  This scenario tests an agent's ability to update React and related dependencies
  while maintaining compatibility and following best practices. The agent must
  handle version constraints, breaking changes, and ensure the project still
  builds and tests pass.

# Timeout in minutes (optional, default: 30)
timeout_minutes: 40

# =============================================================================
# WORKSPACE CONFIGURATION (Required)
# =============================================================================

workspace:
  # Node.js version to use (required)
  # Use specific versions for reproducible results
  node: "18.20.x"
  
  # Package manager detection (required)
  # "auto" = detect from lockfile, "pnpm"|"npm"|"yarn" = force specific manager
  manager: auto
  
  # Allowed package managers (optional)
  # Restricts which package managers the agent can use
  managers_allowed: [pnpm]
  
  # Workspace type (optional)
  # "pnpm"|"npm"|"yarn" - affects how workspaces are handled
  workspaces: pnpm

# =============================================================================
# BASELINE COMMANDS (Required)
# =============================================================================

# Commands to run before agent execution to establish baseline
baseline:
  run:
    # Install dependencies
    - cmd: "pnpm install"
    # Run tests to ensure starting state works
    - cmd: "pnpm -w -r test --if-present"
    # Run linting to check code quality
    - cmd: "pnpm -w -r lint --if-present"

# =============================================================================
# CONSTRAINTS (Optional)
# =============================================================================

constraints:
  # Packages to avoid updating (optional)
  blocklist:
    - name: "webpack"
      reason: "Pinned by build system; major upgrade breaks builder"
    - name: "typescript"
      reason: "Version locked by framework requirements"
  
  # Package namespace migrations (optional)
  # Maps old package names to new ones
  namespace_migrations:
    - from: "xterm"
      to: "@xterm/xterm"
    - from: "lodash"
      to: "lodash-es"
  
  # Version alignment rules (optional)
  # Ensures related packages stay in sync
  companion_versions:
    - main: "react"
      companions:
        - name: "@types/react"
          rule: "major must match"
        - name: "react-dom"
          rule: "exact match"
    - main: "node"
      companions:
        - name: "@types/node"
          rule: "major must match"

# =============================================================================
# TARGETS (Optional)
# =============================================================================

# Dependencies that should be updated
targets:
  # Required updates (must be updated)
  required:
    - name: "react"
      to: ">=18.3.0 <19.0.0"
    - name: "@types/react"
      to: "^18.3.0"
    - name: "typescript"
      to: "^5.5.0"
  
  # Optional updates (nice to have)
  optional:
    - name: "eslint"
      to: "^9.0.0"
    - name: "@types/node"
      to: "^20.0.0"

# =============================================================================
# VALIDATION COMMANDS (Required)
# =============================================================================

# Commands used to validate successful completion
validation:
  commands:
    # Install command (required)
    install: "pnpm install"
    
    # Test command (required)
    test: "pnpm -w -r test --if-present"
    
    # Lint command (optional)
    lint: "pnpm -w -r lint --if-present"
    
    # Type check command (optional)
    typecheck: "pnpm -w -r -F @acme/app tsc --noEmit --project tsconfig.json"

# =============================================================================
# ORACLE ANSWERS (Optional)
# =============================================================================

# File containing expected responses to common agent questions
oracle:
  answers_file: "./oracle-answers.json"

# =============================================================================
# LLM JUDGE CONFIGURATION (Optional)
# =============================================================================

# AI-powered evaluation using language models
llm_judge:
  # Enable LLM judge evaluation (default: false)
  enabled: true
  
  # Model to use for evaluation (optional)
  # Default: "anthropic/claude-3.5-sonnet"
  model: "anthropic/claude-3.5-sonnet"
  
  # Temperature for model responses (optional, default: 0.1)
  temperature: 0.1
  
  # Maximum tokens for model response (optional, default: 2000)
  max_tokens: 2000
  
  # Custom evaluation categories (optional)
  # Override default categories with your own
  categories:
    - "code_quality"
    - "correctness"
    - "efficiency"
    - "maintainability"

# =============================================================================
# SCORING WEIGHTS (Optional)
# =============================================================================

# Customize how different evaluators contribute to the final score
rubric_overrides:
  weights:
    # Install success (did dependencies install correctly?)
    install_success: 1.0
    
    # Test non-regression (do tests still pass?)
    tests_nonregression: 1.5
    
    # Package manager correctness (used correct commands?)
    manager_correctness: 1.0
    
    # Dependency targets (updated the right packages?)
    dependency_targets: 1.0
    
    # Integrity guard (no security vulnerabilities?)
    integrity_guard: 1.0
    
    # Used correct package manager commands
    used_manager_commands: 0.6
    
    # Semantic upgrade quality (good version choices?)
    semantic_upgrade_quality: 0.8
    
    # Companion alignment (kept related packages in sync?)
    companion_alignment: 0.7
    
    # Deprecated handling (properly handled deprecated packages?)
    deprecated_handling: 0.5
    
    # Namespace migrations (handled package renames?)
    namespace_migrations: 0.7
    
    # Breaking changes strategy (handled breaking changes well?)
    breaking_changes_strategy: 0.7
    
    # Monorepo handling (properly coordinated workspace updates?)
    monorepo_handling: 0.8
    
    # User questions quality (answered questions well?)
    user_questions_quality: 0.4
    
    # Efficiency (completed task efficiently?)
    efficiency: 0.5
    
    # LLM judge score (AI evaluation score)
    llm_judge: 1.0

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Simple dependency update scenario:
# - Remove targets section for open-ended updates
# - Use basic validation commands
# - Focus on install_success and tests_nonregression weights

# Complex migration scenario:
# - Add namespace_migrations for package renames
# - Use companion_versions for version alignment
# - Include typecheck validation
# - Higher weights for semantic_upgrade_quality

# Monorepo scenario:
# - Use workspaces: pnpm
# - Include monorepo_handling weight
# - Add workspace-specific validation commands
# - Consider breaking_changes_strategy weight

# Security-focused scenario:
# - High integrity_guard weight
# - Include deprecated_handling weight
# - Focus on semantic_upgrade_quality
# - Add security-specific validation commands
