/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuitesRouteImport } from './routes/suites'
import { Route as EvaluatorsRouteImport } from './routes/evaluators'
import { Route as CostsRouteImport } from './routes/costs'
import { Route as AgentsRouteImport } from './routes/agents'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RunsIndexRouteImport } from './routes/runs.index'
import { Route as BatchesIndexRouteImport } from './routes/batches.index'
import { Route as RunsRunIdRouteImport } from './routes/runs.$runId'
import { Route as BatchesCompareRouteImport } from './routes/batches.compare'
import { Route as BatchesBatchIdRouteImport } from './routes/batches.$batchId'

const SuitesRoute = SuitesRouteImport.update({
  id: '/suites',
  path: '/suites',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluatorsRoute = EvaluatorsRouteImport.update({
  id: '/evaluators',
  path: '/evaluators',
  getParentRoute: () => rootRouteImport,
} as any)
const CostsRoute = CostsRouteImport.update({
  id: '/costs',
  path: '/costs',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsIndexRoute = RunsIndexRouteImport.update({
  id: '/runs/',
  path: '/runs/',
  getParentRoute: () => rootRouteImport,
} as any)
const BatchesIndexRoute = BatchesIndexRouteImport.update({
  id: '/batches/',
  path: '/batches/',
  getParentRoute: () => rootRouteImport,
} as any)
const RunsRunIdRoute = RunsRunIdRouteImport.update({
  id: '/runs/$runId',
  path: '/runs/$runId',
  getParentRoute: () => rootRouteImport,
} as any)
const BatchesCompareRoute = BatchesCompareRouteImport.update({
  id: '/batches/compare',
  path: '/batches/compare',
  getParentRoute: () => rootRouteImport,
} as any)
const BatchesBatchIdRoute = BatchesBatchIdRouteImport.update({
  id: '/batches/$batchId',
  path: '/batches/$batchId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
  '/batches/$batchId': typeof BatchesBatchIdRoute
  '/batches/compare': typeof BatchesCompareRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/batches': typeof BatchesIndexRoute
  '/runs': typeof RunsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
  '/batches/$batchId': typeof BatchesBatchIdRoute
  '/batches/compare': typeof BatchesCompareRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/batches': typeof BatchesIndexRoute
  '/runs': typeof RunsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
  '/batches/$batchId': typeof BatchesBatchIdRoute
  '/batches/compare': typeof BatchesCompareRoute
  '/runs/$runId': typeof RunsRunIdRoute
  '/batches/': typeof BatchesIndexRoute
  '/runs/': typeof RunsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/agents'
    | '/costs'
    | '/evaluators'
    | '/suites'
    | '/batches/$batchId'
    | '/batches/compare'
    | '/runs/$runId'
    | '/batches'
    | '/runs'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/agents'
    | '/costs'
    | '/evaluators'
    | '/suites'
    | '/batches/$batchId'
    | '/batches/compare'
    | '/runs/$runId'
    | '/batches'
    | '/runs'
  id:
    | '__root__'
    | '/'
    | '/agents'
    | '/costs'
    | '/evaluators'
    | '/suites'
    | '/batches/$batchId'
    | '/batches/compare'
    | '/runs/$runId'
    | '/batches/'
    | '/runs/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
  CostsRoute: typeof CostsRoute
  EvaluatorsRoute: typeof EvaluatorsRoute
  SuitesRoute: typeof SuitesRoute
  BatchesBatchIdRoute: typeof BatchesBatchIdRoute
  BatchesCompareRoute: typeof BatchesCompareRoute
  RunsRunIdRoute: typeof RunsRunIdRoute
  BatchesIndexRoute: typeof BatchesIndexRoute
  RunsIndexRoute: typeof RunsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/suites': {
      id: '/suites'
      path: '/suites'
      fullPath: '/suites'
      preLoaderRoute: typeof SuitesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluators': {
      id: '/evaluators'
      path: '/evaluators'
      fullPath: '/evaluators'
      preLoaderRoute: typeof EvaluatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/costs': {
      id: '/costs'
      path: '/costs'
      fullPath: '/costs'
      preLoaderRoute: typeof CostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/': {
      id: '/runs/'
      path: '/runs'
      fullPath: '/runs'
      preLoaderRoute: typeof RunsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/batches/': {
      id: '/batches/'
      path: '/batches'
      fullPath: '/batches'
      preLoaderRoute: typeof BatchesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/runs/$runId': {
      id: '/runs/$runId'
      path: '/runs/$runId'
      fullPath: '/runs/$runId'
      preLoaderRoute: typeof RunsRunIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/batches/compare': {
      id: '/batches/compare'
      path: '/batches/compare'
      fullPath: '/batches/compare'
      preLoaderRoute: typeof BatchesCompareRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/batches/$batchId': {
      id: '/batches/$batchId'
      path: '/batches/$batchId'
      fullPath: '/batches/$batchId'
      preLoaderRoute: typeof BatchesBatchIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
  CostsRoute: CostsRoute,
  EvaluatorsRoute: EvaluatorsRoute,
  SuitesRoute: SuitesRoute,
  BatchesBatchIdRoute: BatchesBatchIdRoute,
  BatchesCompareRoute: BatchesCompareRoute,
  RunsRunIdRoute: RunsRunIdRoute,
  BatchesIndexRoute: BatchesIndexRoute,
  RunsIndexRoute: RunsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
