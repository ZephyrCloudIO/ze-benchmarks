/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuitesRouteImport } from './routes/suites'
import { Route as EvaluatorsRouteImport } from './routes/evaluators'
import { Route as CostsRouteImport } from './routes/costs'
import { Route as AgentsRouteImport } from './routes/agents'
import { Route as IndexRouteImport } from './routes/index'

const SuitesRoute = SuitesRouteImport.update({
  id: '/suites',
  path: '/suites',
  getParentRoute: () => rootRouteImport,
} as any)
const EvaluatorsRoute = EvaluatorsRouteImport.update({
  id: '/evaluators',
  path: '/evaluators',
  getParentRoute: () => rootRouteImport,
} as any)
const CostsRoute = CostsRouteImport.update({
  id: '/costs',
  path: '/costs',
  getParentRoute: () => rootRouteImport,
} as any)
const AgentsRoute = AgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/agents': typeof AgentsRoute
  '/costs': typeof CostsRoute
  '/evaluators': typeof EvaluatorsRoute
  '/suites': typeof SuitesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/agents' | '/costs' | '/evaluators' | '/suites'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/agents' | '/costs' | '/evaluators' | '/suites'
  id: '__root__' | '/' | '/agents' | '/costs' | '/evaluators' | '/suites'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AgentsRoute: typeof AgentsRoute
  CostsRoute: typeof CostsRoute
  EvaluatorsRoute: typeof EvaluatorsRoute
  SuitesRoute: typeof SuitesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/suites': {
      id: '/suites'
      path: '/suites'
      fullPath: '/suites'
      preLoaderRoute: typeof SuitesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/evaluators': {
      id: '/evaluators'
      path: '/evaluators'
      fullPath: '/evaluators'
      preLoaderRoute: typeof EvaluatorsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/costs': {
      id: '/costs'
      path: '/costs'
      fullPath: '/costs'
      preLoaderRoute: typeof CostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/agents': {
      id: '/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AgentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AgentsRoute: AgentsRoute,
  CostsRoute: CostsRoute,
  EvaluatorsRoute: EvaluatorsRoute,
  SuitesRoute: SuitesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
